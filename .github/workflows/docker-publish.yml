name: Docker Image CI/CD

on:
  push:
    branches:
      - main
    tags:
      - 'v*.*.*'
  pull_request:
    branches:
      - main

# Cancel in-progress runs for the same PR/branch
concurrency:
  group: ${{ github.workflow }}-${{ github.event.pull_request.number || github.ref }}
  cancel-in-progress: true

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}

jobs:
  build-and-push:
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write
      id-token: write

    steps:
      - name: Checkout repository
        uses: actions/checkout@v5

      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Build TypeScript
        run: npm run build

      - name: Run unit tests
        id: test
        run: |
          set -o pipefail
          npm test 2>&1 | tee test-output.txt

      - name: Run coverage report
        id: coverage
        run: npm run test:coverage

      - name: Generate Test Summary
        if: always()
        run: |
          # Extract coverage data
          if [ -f "coverage/coverage-summary.json" ]; then
            LINES_PCT=$(jq -r '.total.lines.pct' coverage/coverage-summary.json)
            STATEMENTS_PCT=$(jq -r '.total.statements.pct' coverage/coverage-summary.json)
            BRANCHES_PCT=$(jq -r '.total.branches.pct' coverage/coverage-summary.json)
            FUNCTIONS_PCT=$(jq -r '.total.functions.pct' coverage/coverage-summary.json)
          else
            LINES_PCT="N/A"
            STATEMENTS_PCT="N/A"
            BRANCHES_PCT="N/A"
            FUNCTIONS_PCT="N/A"
          fi
          
          # Extract test counts from output
          TEST_COUNT=$(grep -o '[0-9]* passed' test-output.txt | head -1 || echo "N/A")
          
          cat >> $GITHUB_STEP_SUMMARY << EOF
          # 🧪 Test Results
          
          ## Unit Tests
          
          ✅ **Tests**: ${TEST_COUNT}
          
          ## 📊 Coverage Report
          
          | Metric | Coverage |
          |--------|----------|
          | **Lines** | ${LINES_PCT}% |
          | **Statements** | ${STATEMENTS_PCT}% |
          | **Branches** | ${BRANCHES_PCT}% |
          | **Functions** | ${FUNCTIONS_PCT}% |
          EOF

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to Container Registry
        if: github.event_name != 'pull_request'
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Extract metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
          tags: |
            # For version tags (e.g., v1.0.0)
            type=semver,pattern={{version}}
            type=semver,pattern={{major}}.{{minor}}
            type=semver,pattern={{major}}
            # Latest tag only on version tags
            type=raw,value=latest,enable=${{ startsWith(github.ref, 'refs/tags/v') }}
            # SHA-based tag for main branch commits
            type=sha,prefix=sha-,enable=${{ github.ref_name == 'main' }}
            # PR tags for testing (format: pr-<number>, e.g., pr-5)
            type=ref,event=pr
          labels: |
            org.opencontainers.image.title=FOAAS MCP Server
            org.opencontainers.image.description=MCP server to expose FOAAS (Fuck Off As A Service) functionality to AI clients
            org.opencontainers.image.vendor=gusztavvargadr
            org.opencontainers.image.licenses=MIT

      - name: Generate build timestamp
        id: timestamp
        run: echo "date=$(date -u +'%Y-%m-%dT%H:%M:%SZ')" >> $GITHUB_OUTPUT

      - name: Extract version from ref
        id: version
        run: |
          if [[ "${{ github.ref }}" == refs/tags/* ]]; then
            echo "version=${GITHUB_REF#refs/tags/}" >> $GITHUB_OUTPUT
          else
            echo "version=${{ github.ref_name }}" >> $GITHUB_OUTPUT
          fi

      - name: Build Docker image for testing (amd64 only)
        id: build
        uses: docker/build-push-action@v6
        with:
          context: .
          platforms: linux/amd64
          push: false
          load: true  # Load image into Docker for testing
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max
          build-args: |
            VERSION=${{ steps.version.outputs.version }}
            COMMIT_SHA=${{ github.sha }}
            BUILD_DATE=${{ steps.timestamp.outputs.date }}

      - name: Test MCP Server
        id: docker_test
        run: |
          echo "🧪 Testing FOAAS MCP Server..."
          
          # Get the first tag from the metadata
          IMAGE_TAG=$(echo "${{ steps.meta.outputs.tags }}" | head -n1)
          echo "Testing image: $IMAGE_TAG"
          
          # Verify image exists
          if ! docker image inspect "$IMAGE_TAG" >/dev/null 2>&1; then
            echo "❌ Error: Image $IMAGE_TAG not found"
            docker images
            exit 1
          fi
          
          # Get image size (docker inspect returns bytes, convert to MB)
          IMAGE_SIZE=$(docker image inspect "$IMAGE_TAG" --format='{{.Size}}' | awk '{printf "%.0f", $1/1024/1024}')
          echo "image_size=${IMAGE_SIZE}" >> $GITHUB_OUTPUT
          
          # Run the test script
          chmod +x ./test-server.sh
          ./test-server.sh "$IMAGE_TAG" 2>&1 | tee docker-test-output.txt
          
          echo "✅ All integration tests passed!"

      - name: Generate Docker Summary
        if: always()
        run: |
          IMAGE_TAG=$(echo "${{ steps.meta.outputs.tags }}" | head -n1)
          
          cat >> $GITHUB_STEP_SUMMARY << EOF
          
          ---
          
          # 🐳 Docker Build & Test
          
          ## Build Information
          
          | Property | Value |
          |----------|-------|
          | **Version** | \`${{ steps.version.outputs.version }}\` |
          | **Commit** | \`${GITHUB_SHA:0:7}\` |
          | **Image Size** | ${{ steps.docker_test.outputs.image_size }} MB |
          | **Platform** | linux/amd64 (test) |
          
          ## Image Tags
          
          \`\`\`
          ${{ steps.meta.outputs.tags }}
          \`\`\`
          
          ## Integration Test Results
          
          ✅ **All integration tests passed!**
          
          <details>
          <summary>📋 View test output</summary>
          
          \`\`\`
          $(cat docker-test-output.txt 2>/dev/null || echo "Test output not available")
          \`\`\`
          
          </details>
          EOF

      - name: Set up QEMU for multi-arch build
        if: github.event_name != 'pull_request'
        uses: docker/setup-qemu-action@v3

      - name: Push Docker image to registry
        if: github.event_name != 'pull_request'
        id: push
        uses: docker/build-push-action@v6
        with:
          context: .
          platforms: linux/amd64,linux/arm64
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max
          build-args: |
            VERSION=${{ steps.version.outputs.version }}
            COMMIT_SHA=${{ github.sha }}
            BUILD_DATE=${{ steps.timestamp.outputs.date }}

      - name: Image digest
        if: github.event_name != 'pull_request'
        run: echo "Image pushed with digest ${{ steps.push.outputs.digest }}"

      - name: Generate Publish Summary
        if: github.event_name != 'pull_request'
        run: |
          FIRST_TAG=$(echo "${{ steps.meta.outputs.tags }}" | head -n1)
          
          cat >> $GITHUB_STEP_SUMMARY << EOF
          
          ---
          
          # 📦 Published to Registry
          
          ✅ Successfully built and pushed multi-platform images
          
          **Platforms**: linux/amd64, linux/arm64  
          **Registry**: \`${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}\`  
          **Digest**: \`${{ steps.push.outputs.digest }}\`
          
          ## Quick Start
          
          \`\`\`bash
          # Pull and run
          docker pull ${FIRST_TAG}
          echo '{"jsonrpc":"2.0","id":1,"method":"tools/list"}' | docker run --rm -i ${FIRST_TAG}
          \`\`\`
          EOF
